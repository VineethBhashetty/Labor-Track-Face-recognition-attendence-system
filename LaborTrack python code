import face_recognition
import cv2
import numpy as np
import csv
import os
from datetime import datetime

# Initialize video capture
video_capture = cv2.VideoCapture(0, cv2.CAP_DSHOW)

# Load and encode reference images
known_faces = {
    "Steve Jobs": "C:/Users/Vineeth/OneDrive/Desktop/photos/SteveJobs.jpg",
    "Ratan Tata": "C:/Users/Vineeth/OneDrive/Desktop/photos/RatanTata.jpg",
    "Elon Musk": "C:/Users/Vineeth/OneDrive/Desktop/photos/ElonMusk.jpg"
}

known_face_encodings = []
known_face_names = []

for name, filepath in known_faces.items():
    try:
        image = face_recognition.load_image_file(filepath)
        encoding = face_recognition.face_encodings(image)[0]
        known_face_encodings.append(encoding)
        known_face_names.append(name)
    except IndexError:
        print(f"Face encoding failed for {name}. Check the image file.")
    except FileNotFoundError:
        print(f"File not found: {filepath}")

# Set up CSV file for recording attendance
csv_directory = "C:/Users/Vineeth/OneDrive/vineeth/bhashetty"
os.makedirs(csv_directory, exist_ok=True)  # Create directory if it doesn't exist
csv_filepath = os.path.join(csv_directory, "labourattendance.csv")

# Create or overwrite the CSV file and write header
with open(csv_filepath, 'w+', newline='') as f:
    lnwriter = csv.writer(f)
    lnwriter.writerow(["Name", "Date", "Time"])

# Variables for face recognition processing
face_locations = []
face_encodings = []
face_names = []
students = set(known_face_names)

while True:
    ret, frame = video_capture.read()
    if not ret:
        print("Error: Could not read frame from video capture.")
        break

    # Resize frame for faster processing and convert to RGB format
    small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)
    rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)

    # Detect face locations and face encodings
    face_locations = face_recognition.face_locations(rgb_small_frame)
    face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)

    # Initialize face names array for the current frame
    face_names = []

    for face_encoding in face_encodings:
        matches = face_recognition.compare_faces(known_face_encodings, face_encoding)
        name = "Unknown"
        
        # Find the best match for the current face encoding
        face_distances = face_recognition.face_distance(known_face_encodings, face_encoding)
        best_match_index = np.argmin(face_distances)
        if matches[best_match_index]:
            name = known_face_names[best_match_index]
        
        face_names.append(name)

        # If the person is recognized and in the students list, mark them as present
        if name in students:
            students.remove(name)
            current_time = datetime.now().strftime("%H:%M:%S")
            current_date = datetime.now().strftime("%Y-%m-%d")  # Get current date
            with open(csv_filepath, 'a', newline='') as f:
                lnwriter = csv.writer(f)
                lnwriter.writerow([name, current_date, current_time])  # Write name, date, and time

    # Display results in the video feed
    for (top, right, bottom, left), name in zip(face_locations, face_names):
        # Scale back up face locations since the frame we detected in was scaled to 1/4 size
        top *= 4
        right *= 4
        bottom *= 4
        left *= 4

        # Draw a box around the face
        cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)

        # Draw a label with a name below the face
        cv2.rectangle(frame, (left, bottom - 35), (right, bottom), (0, 255, 0), cv2.FILLED)
        font = cv2.FONT_HERSHEY_DUPLEX
        cv2.putText(frame, name, (left + 6, bottom - 6), font, 0.5, (255, 255, 255), 1)

    # Show the resulting image with attendance overlay
    cv2.imshow("Face Recognition Attendance", frame)

    # Press 'q' to exit
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture object and close the display window
video_capture.release()
cv2.destroyAllWindows()
